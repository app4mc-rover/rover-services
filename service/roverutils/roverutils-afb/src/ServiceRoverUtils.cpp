/* Copyright 2018 Pedro Cuadra - pjcuadra@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* WARNING: This file is automatically generated by raml2agl */
#include <service/ServiceRoverUtils.h>
#include <roverapi/rover_utils.hpp>

using namespace rover;

static RoverUtils utils;

ServiceRoverUtils::ServiceRoverUtils() {
  AFB_NOTICE("[ServiceRoverUtils] Constructor ");
}

int ServiceRoverUtils::init() {
  AFB_NOTICE("[ServiceRoverUtils] Init ");
  return 0;
}


/** Autogenrated doc for get_bluetooth_status */
int ServiceRoverUtils::get_bluetooth_status(bool &out_is_on) {

  AFB_NOTICE("[ServiceRoverUtils] Get_bluetooth_status");

  out_is_on = static_cast<bool>(utils.getBluetoothStatus());

  return 0;
}

/** Autogenrated doc for get_core_utilization */
int ServiceRoverUtils::get_core_utilization(double out_core_utilization[], int &out_core_utilization_size) {

  AFB_NOTICE("[ServiceRoverUtils] Get_core_utilization");
  AFB_ERROR("Method Get_core_utilization not implemented");

  float float_cores[] = {};

  // Get data from library
  out_core_utilization_size = utils.numberOfCores;
  utils.getCoreUtilization(float_cores);

  // Convert float to double
  if (out_core_utilization != nullptr) {
    delete [] out_core_utilization;
  }

  out_core_utilization = new double[utils.numberOfCores];

  for (int i = 0; i < utils.numberOfCores; i++){
    out_core_utilization[i] = static_cast<double>(float_cores[i]);
  }

  // Clean up internal created variables
  delete [] float_cores;

  return 0;
}

/** Autogenrated doc for get_ethernet_status */
int ServiceRoverUtils::get_ethernet_status(bool &out_is_on) {

  AFB_NOTICE("[ServiceRoverUtils] Get_ethernet_status");

  out_is_on = static_cast<bool>(utils.getEthernetStatus());

  return 0;
}

/** Autogenrated doc for get_honocloud_status */
int ServiceRoverUtils::get_honocloud_status(const char * in_device_id,
    const char * in_host_name,
    const char * in_password,
    const int in_port,
    const char * in_tenant_name,
    const char * in_user,
    bool &out_is_on) {

  AFB_NOTICE("[ServiceRoverUtils] Get_honocloud_status");
  AFB_WARNING("[ServiceRoverUtils] Unimplemented Call");

  return -1;
}

/** Autogenrated doc for get_internet_status */
int ServiceRoverUtils::get_internet_status(bool &out_is_on) {

  AFB_NOTICE("[ServiceRoverUtils] Get_internet_status");

  out_is_on = static_cast<bool>(utils.getInternetStatus());

  return 0;
}

/** Autogenrated doc for get_number_cores */
int ServiceRoverUtils::get_number_cores(int &out_num_cores) {

  AFB_NOTICE("[ServiceRoverUtils] Get_number_cores");

  out_num_cores = static_cast<int>(utils.numberOfCores);

  return 0;
}

/** Autogenrated doc for get_wlan_status */
int ServiceRoverUtils::get_wlan_status(bool &out_is_on) {

  AFB_NOTICE("[ServiceRoverUtils] Get_wlan_status");

  out_is_on = static_cast<bool>(utils.getWlanStatus());

  return 0;
}

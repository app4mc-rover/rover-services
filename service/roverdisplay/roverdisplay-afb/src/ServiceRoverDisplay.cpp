/* Copyright 2018 Pedro Cuadra - pjcuadra@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* WARNING: This file is automatically generated by raml2agl */
#include <service/ServiceRoverDisplay.h>

ServiceRoverDisplay::ServiceRoverDisplay() {
  AFB_NOTICE("[ServiceRoverDisplay] Constructor ");
}

int ServiceRoverDisplay::init() {
  AFB_NOTICE("[ServiceRoverDisplay] Init ");
  return -1;
}


/** Autogenrated doc for clear_display */
int ServiceRoverDisplay::clear_display() {

  AFB_NOTICE("[ServiceRoverDisplay] Clear_display");
  AFB_ERROR("Method Clear_display not implemented");

  return -1;
}

/** Autogenrated doc for display */
int ServiceRoverDisplay::display() {

  AFB_NOTICE("[ServiceRoverDisplay] Display");
  AFB_ERROR("Method Display not implemented");

  return -1;
}

/** Autogenrated doc for draw_bitmap */
int ServiceRoverDisplay::draw_bitmap(const int in_bitmap[], const int in_bitmap_size,
    const int in_color,
    const int in_h_size,
    const int in_w_size,
    const int in_x_loc,
    const int in_y_loc) {

  AFB_NOTICE("[ServiceRoverDisplay] Draw_bitmap");
  AFB_ERROR("Method Draw_bitmap not implemented");

  return -1;
}

/** Autogenrated doc for draw_char */
int ServiceRoverDisplay::draw_char(const int in_bg_color,
    const int in_character,
    const int in_color,
    const int in_size,
    const int in_x_loc,
    const int in_y_loc) {

  AFB_NOTICE("[ServiceRoverDisplay] Draw_char");
  AFB_ERROR("Method Draw_char not implemented");

  return -1;
}

/** Autogenrated doc for draw_circle */
int ServiceRoverDisplay::draw_circle(const int in_color,
    const bool in_filled,
    const int in_r_size,
    const int in_x_loc,
    const int in_y_loc) {

  AFB_NOTICE("[ServiceRoverDisplay] Draw_circle");
  AFB_ERROR("Method Draw_circle not implemented");

  return -1;
}

/** Autogenrated doc for draw_pixel */
int ServiceRoverDisplay::draw_pixel(const int in_color,
    const int in_x_loc,
    const int in_y_loc) {

  AFB_NOTICE("[ServiceRoverDisplay] Draw_pixel");
  AFB_ERROR("Method Draw_pixel not implemented");

  return -1;
}

/** Autogenrated doc for draw_rectangle */
int ServiceRoverDisplay::draw_rectangle(const int in_color,
    const bool in_filled,
    const int in_h_size,
    const int in_w_size,
    const int in_x_loc,
    const int in_y_loc) {

  AFB_NOTICE("[ServiceRoverDisplay] Draw_rectangle");
  AFB_ERROR("Method Draw_rectangle not implemented");

  return -1;
}

/** Autogenrated doc for draw_round_rectangle */
int ServiceRoverDisplay::draw_round_rectangle(const int in_color,
    const int in_h_size,
    const int in_r_size,
    const int in_w_size,
    const int in_x_loc,
    const int in_y_loc) {

  AFB_NOTICE("[ServiceRoverDisplay] Draw_round_rectangle");
  AFB_ERROR("Method Draw_round_rectangle not implemented");

  return -1;
}

/** Autogenrated doc for draw_triangle */
int ServiceRoverDisplay::draw_triangle(const int in_color,
    const bool in_filled,
    const int in_x1_loc,
    const int in_x2_loc,
    const int in_x3_loc,
    const int in_y1_loc,
    const int in_y2_loc,
    const int in_y3_loc) {

  AFB_NOTICE("[ServiceRoverDisplay] Draw_triangle");
  AFB_ERROR("Method Draw_triangle not implemented");

  return -1;
}

/** Autogenrated doc for fill_screen */
int ServiceRoverDisplay::fill_screen(const int in_color) {

  AFB_NOTICE("[ServiceRoverDisplay] Fill_screen");
  AFB_ERROR("Method Fill_screen not implemented");

  return -1;
}

/** Autogenrated doc for get_height */
int ServiceRoverDisplay::get_height(int &out_height) {

  AFB_NOTICE("[ServiceRoverDisplay] Get_height");
  AFB_ERROR("Method Get_height not implemented");

  return -1;
}

/** Autogenrated doc for get_width */
int ServiceRoverDisplay::get_width(int &out_width) {

  AFB_NOTICE("[ServiceRoverDisplay] Get_width");
  AFB_ERROR("Method Get_width not implemented");

  return -1;
}

/** Autogenrated doc for invert_display */
int ServiceRoverDisplay::invert_display(const bool in_inv) {

  AFB_NOTICE("[ServiceRoverDisplay] Invert_display");
  AFB_ERROR("Method Invert_display not implemented");

  return -1;
}

/** Autogenrated doc for print */
int ServiceRoverDisplay::print(const char * in_text) {

  AFB_NOTICE("[ServiceRoverDisplay] Print");
  AFB_ERROR("Method Print not implemented");

  return -1;
}

/** Autogenrated doc for set_cursor */
int ServiceRoverDisplay::set_cursor(const int in_x_loc,
    const int in_y_loc) {

  AFB_NOTICE("[ServiceRoverDisplay] Set_cursor");
  AFB_ERROR("Method Set_cursor not implemented");

  return -1;
}

/** Autogenrated doc for set_rotation */
int ServiceRoverDisplay::set_rotation(const int in_rot) {

  AFB_NOTICE("[ServiceRoverDisplay] Set_rotation");
  AFB_ERROR("Method Set_rotation not implemented");

  return -1;
}

/** Autogenrated doc for set_text_color */
int ServiceRoverDisplay::set_text_color(const int in_color) {

  AFB_NOTICE("[ServiceRoverDisplay] Set_text_color");
  AFB_ERROR("Method Set_text_color not implemented");

  return -1;
}

/** Autogenrated doc for set_text_size */
int ServiceRoverDisplay::set_text_size(const int in_size) {

  AFB_NOTICE("[ServiceRoverDisplay] Set_text_size");
  AFB_ERROR("Method Set_text_size not implemented");

  return -1;
}

/* Copyright 2018 Pedro Cuadra - pjcuadra@gmail.com
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* WARNING: This file is automatically generated by raml2agl */
#include <service/ServiceRoverDriving.h>
#include <roverapi/rover_driving.hpp>

using namespace rover;

static RoverDriving obj;

ServiceRoverDriving::ServiceRoverDriving() {
  AFB_NOTICE("[ServiceRoverDriving] Constructor ");
}

int ServiceRoverDriving::init() {
  AFB_NOTICE("[ServiceRoverDriving] Init ");

  obj.initialize();

  return 0;
}


/** Autogenrated doc for gobackward */
int ServiceRoverDriving::gobackward() {
  AFB_NOTICE("[ServiceRoverDriving] Gobackward");

  obj.goBackward();

  return 0;
}

/** Autogenrated doc for goforward */
int ServiceRoverDriving::goforward() {
  AFB_NOTICE("[ServiceRoverDriving] Goforward");

  obj.goForward();

  return 0;
}

/** Autogenrated doc for setspeed */
int ServiceRoverDriving::setspeed(const int in_speed) {
  AFB_NOTICE("[ServiceRoverDriving] Setspeed");

  obj.setSpeed(in_speed);

  return 0;
}

/** Autogenrated doc for stop */
int ServiceRoverDriving::stop() {
  AFB_NOTICE("[ServiceRoverDriving] Stop");

  obj.stopRover();

  return 0;
}

/** Autogenrated doc for turnleft */
int ServiceRoverDriving::turnleft() {
  AFB_NOTICE("[ServiceRoverDriving] Turnleft");

  obj.turnLeft();

  return 0;
}

/** Autogenrated doc for turnright */
int ServiceRoverDriving::turnright() {
  AFB_NOTICE("[ServiceRoverDriving] Turnright");

  obj.turnRight();

  return 0;
}
